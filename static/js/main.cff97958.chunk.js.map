{"version":3,"sources":["history.js","components/Header.js","components/About.js","components/FormControls/Input.js","components/FormControls/Select.js","components/FormControls/Checkbox.js","components/Buttons/Button.js","components/Settings/Settings.js","data/actions/state.js","axios.js","data/actions/api.js","components/Settings/index.js","components/EntryErrors/EntryErrors.js","components/Entry/Entry.js","components/Entry/index.js","components/Reset/Reset.js","components/Reset/index.js","components/Copy/Copy.js","components/Copy/index.js","components/Selection/Selection.js","components/Selection/index.js","components/GameForm/GameForm.js","components/GameForm/index.js","components/GameRegistered.js","components/Loading.js","components/GameHistory/GameHistory.js","components/GameHistory/index.js","components/UpdateGame/UpdateGame.js","components/UpdateGame/index.js","components/FourOhFour.js","App.js","serviceWorker.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["createHashHistory","Header","className","About","to","Input","field","type","value","handleChange","label","inputClass","groupClass","htmlFor","id","name","onChange","defaultProps","Select","options","map","option","index","key","Checkbox","checked","Button","onClick","message","disabled","Settings","props","state","team1Name","team2Name","teamSize","abilityPick","namePicked","nameConfirmed","handleNameButton","bind","handleConfirmName","handleResetNameButton","handleTeam1Name","handleTeam2Name","handleTeamSize","handleAbilityPick","handleSubmit","handleResetForm","this","handleTeamName","setState","e","currentTarget","target","preventDefault","handleSave","handleFormReset","Component","randomTeams","array","i","length","j","Math","floor","random","temporary","filter","_","equalTeams","sort","a","b","ability","setSize","pos1","pos2","sum1","sum2","team1","team2","val","includes","axios","create","baseURL","headers","Accept","getGames","dispatch","get","then","data","games","saveGames","connect","history","push","saveTeamNames","EntryErrors","formErrors","Object","keys","fieldName","Entry","Array","from","names","players","player","abilities","totalPlayers","playerNames","playerAbilities","incompletePlayerNames","duplicatePlayerNames","playerNamesComplete","playerNamesUnique","formValid","reEntry","handleNameInput","handleAbilityInput","arr","fieldValidationErrors","numberOfPlayers","indexOf","toLowerCase","validateForm","slice","validateField","rankings","handleNameEntries","onSubmit","newArray","object","makePlayers","randomisedTeams","equalisedTeams","updateEntries","Reset","handleReset","Copy","teams","reduce","string","copied","handleCopy","text","onCopy","Selection","handleAmend","team","total","toFixed","GameForm","gameDate","team1Score","team2Score","gameComplete","handleGameDate","handleTeam1Score","handleTeam2Score","handleGameComplete","handleGameSave","formIncomplete","post","game_date","team_1","team_2","team_1_score","team_2_score","game_complete","postGame","GameRegistered","Loading","children","loaded","GameHistory","handleLoad","useEffect","scope","game","UpdateGame","gamesLoaded","prevProps","handleGameUpdate","gameId","find","put","putGame","FourOhFour","App","exact","path","render","match","params","Boolean","window","location","hostname","initial","reducer","action","saveSettingsReducer","notFifty","savePlayersReducer","saveNamesReducer","setAmendReducer","saveGamesReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","persistState","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cff97958.chunk.js","sourcesContent":["import { createHashHistory } from \"history\";\nexport default createHashHistory();","import React from \"react\";\n\nconst Header = () => (\n    <div className=\"container main-title\">\n        <header className=\"title-text\">\n            <h1>Team Selector</h1>\n            <h5>Never be picked last again</h5>\n        </header>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst About = () => (\n    <div className=\"container\">\n        <h5>Team Selector helps you quickly and fairly pick your teams. Less time organising, more time winning.</h5>\n        <br/>\n            <ul className=\"about-list\">\n            <h5>Features include:</h5>\n                <li>Team name generator to randomly assign your teams with fun names</li>\n                <li>Selection for team sizes ranging from 5-a-side up to 11-a-side</li>\n                <li>Random selection of teams</li>\n                <li>Option to provide player ability scores for balanced team selection</li>\n                <li>Copy feature so that you can easily copy the team details to paste into email, text messages etc</li> \n                <li>Save game details, including the game date and team names</li>  \n                <li>Update game details with the score, when the game is complete</li>  \n                <li>View the details from previous games</li>  \n            </ul>\n            <div className=\"central-button\">\n                <Link to={`/team-details`}>\n                        <p className=\"btn btn-primary\">Get selecting!</p>\n                </Link>\n            </div>\n            <div className=\"central-button\">\n                <Link to={`/game-history`}>\n                        <p className=\"btn btn-danger\">View previous game details</p>\n                </Link>\n            </div>\n    </div>\n);\n\nexport default About;","import React from \"react\";\n\nconst Input = ({ field, type, value, handleChange, label, inputClass, groupClass }) => (\n    <div className={groupClass}>\n    <label htmlFor={field}>{label}</label>\n    <input className={inputClass}\n           id={field}\n           name={field}\n           type={type}\n           value={ value }\n           onChange={handleChange} />\n    </div>\n);\n\nInput.defaultProps = {\n    inputClass: \"form-control\",\n    groupClass: \"form-group\",\n    type: \"text\",\n}\n\nexport default Input;","import React from \"react\";\n\nconst Select = ({ field, value, handleChange, label, options }) => (\n    <div className=\"form-group\">\n    <label htmlFor={field}>{label}</label>\n    <select className=\"form-control\"\n           id={field}\n           name={field}\n           value={ value }\n           onChange={handleChange}>\n    {options.map((option, index) => (\n        <option key={index} value={option}>{option}</option>\n    ))}\n    </select>\n    </div>\n);\n\nexport default Select;","import React from \"react\";\n\nconst Checkbox = ({ groupClass, label,  field, checked, handleChange, }) => (\n    <div className={groupClass}>\n        <label>\n            {label}\n            <input\n                name={field}\n                type=\"checkbox\"\n                checked={checked}\n                onChange={handleChange} />\n        </label>\n    </div>\n);\n\nCheckbox.defaultProps = {\n    groupClass: \"form-check\",\n}\n\nexport default Checkbox;","import React from \"react\";\n\nconst Button = ({ type, className, onClick, message, disabled }) => (\n    <button \n    type={type}\n    className={`btn btn-${className}`}\n    onClick={onClick}\n    disabled={disabled}>\n    {message}</button>\n);\n\nButton.defaultProps = {\n    type: \"button\",\n    className: \"primary\",\n    disabled: false,\n}\n\nexport default Button;\n\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Input from \"../FormControls/Input\";\nimport Select from \"../FormControls/Select\";\nimport Checkbox from \"../FormControls/Checkbox\";\nimport Button from \"../Buttons/Button\";\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n\n        // initial state with default values has been mapped to props in index file\n        // local state set to these values\n        this.state = {\n            team1Name: props.team1Name,\n            team2Name: props.team2Name,\n            teamSize: props.teamSize,\n            abilityPick: props.abilityPick, \n            namePicked: false,  \n            nameConfirmed: false,         \n        };\n\n        this.handleNameButton = this.handleNameButton.bind(this);\n        this.handleConfirmName = this.handleConfirmName.bind(this);\n        this.handleResetNameButton = this.handleResetNameButton.bind(this);\n\n        this.handleTeam1Name = this.handleTeam1Name.bind(this);\n        this.handleTeam2Name = this.handleTeam2Name.bind(this);\n        this.handleTeamSize = this.handleTeamSize.bind(this);\n        this.handleAbilityPick = this.handleAbilityPick.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n              \n        this.handleResetForm = this.handleResetForm.bind(this);\n    }\n\n    handleNameButton() {\n        this.props.handleTeamName();\n        this.setState((state, props) => ({\n            namePicked: true,\n            team1Name: props.team1Name,\n            team2Name: props.team2Name,\n        }));\n    }\n\n    handleConfirmName() {\n        this.setState({\n            team1Name: this.props.team1Name,\n            team2Name: this.props.team2Name,\n            nameConfirmed: true,\n        })\n    }\n\n    handleResetNameButton() {\n        this.setState({\n            namePicked: false,\n            team1Name: \"Team 1\",\n            team2Name: \"Team 2\",\n        })\n    }\n\n    handleTeam1Name(e) {\n        this.setState({ team1Name: e.currentTarget.value });\n    }\n\n    handleTeam2Name(e) {\n        this.setState({ team2Name: e.currentTarget.value });\n    }\n\n    handleTeamSize(e) {\n        this.setState({ teamSize: e.currentTarget.value });\n    }\n\n    handleAbilityPick(e) {\n        let target = e.target;\n        let value = target.checked;\n        let name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleSave({ ...this.state });\n    }\n     \n    handleResetForm() {\n        this.props.handleFormReset();\n        this.setState({\n            abilityPick: false,\n            team1Name: \"Team 1\",\n            team2Name: \"Team 2\",\n            teamSize: 5,\n            namePicked: false,\n            nameConfirmed: false\n        });\n    }\n\n    render() {\n        let {\n            team1Name,\n            team2Name,\n            teamSize,\n            abilityPick,\n            namePicked, \n            nameConfirmed,\n        } = this.state;\n\n        //Presentation of name picker buttons and team name form inputs dependent on user selections that control namePicked and nameConfirmed state items\n        return (\n            <div className=\"container\">\n            <h3 className=\"instructions-heading\">Team Details</h3>\n            {!nameConfirmed ? \n            <div className=\"name-picker-text\">\n                <p className=\"name-picker-para\">Need inspiration? Use our name picker:</p>\n                <Button onClick={this.handleNameButton}\n                        message={!namePicked ? \"Click me for cool names!\" : \"Click again for more names!\"} />\n            </div> : null }\n            \n            {namePicked && !nameConfirmed ? \n            <>\n            <Button onClick={this.handleConfirmName}\n                    message={\"Use the team names below!\"}\n                    className={\"btn btn-primary gapped-buttons\"} />                  \n            <Button onClick={this.handleResetNameButton}\n                    message={\"I'll choose my own thanks\"}\n                     />\n             </> : null }\n             {namePicked ? \n             <ul className=\"team-name-list\">\n                <h4>Your team names are:</h4>\n                    {this.props.team1Name === \"Team 1\" ? <p>Loading...</p> :\n                    <>\n                        <li>\n                            <h5>{this.props.team1Name}</h5>\n                        </li>\n                        <li>\n                            <h5>{this.props.team2Name}</h5>\n                        </li>\n                    </>}\n             </ul> : null }\n            <form>\n                {!namePicked ?\n                <>\n                <Input label={\"Team 1 Name:\"}\n                       field={team1Name}\n                       value={namePicked ?  this.props.team1Name : team1Name}\n                       handleChange={this.handleTeam1Name} \n                />\n                <Input label={\"Team 2 Name:\"}\n                       field={team2Name}\n                       value={namePicked ?  this.props.team2Name : team2Name}\n                       handleChange={this.handleTeam2Name} \n                />\n                </> : null}\n                {!namePicked || nameConfirmed ?\n                <>\n                <Select field={\"teamSize\"}\n                        value={teamSize}\n                        label={\"Players per team:\"}\n                        handleChange={this.handleTeamSize}\n                        options={[\"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]}\n                />\n                <Checkbox label={\"Select teams by ability:\"}\n                          field={\"abilityPick\"}\n                          checked={abilityPick}\n                          handleChange={this.handleAbilityPick} />\n                <Button type={\"submit\"}\n                            onClick={this.handleSubmit}\n                            message={\"Submit\"} />\n                <div className=\"adjacent-buttons\">\n                    <Button className={\"danger\"}\n                            message={\"Reset form\"}\n                            onClick={this.handleResetForm} />\n                    <Link to={`/`}>\n                        <p className=\"btn btn-danger\">Back to home</p>\n                    </Link>\n                </div>\n                </>\n                : null}\n            </form>\n            \n            </div>\n        );\n    }\n}\n\nexport default Settings;","/*HELPER FUNCTIONS*/\n///to make array of player objects\nlet makePlayers = (keys, names, abilities) => {\n    let newArray = [];\n\n    for (let i = 0; i < keys.length; i ++) {\n        let object = {\n            id: keys[i],\n            name: names[i],\n            ability: +abilities[i], //+ used to make ability be numeric\n        }\n        newArray.push(object);\n    }\n    return newArray;\n}\n\n/// to randomly shuffle an array, using Fishers-Yates Algorithm\nlet randomTeams = (array) => {\n    for(let i = array.length -1; i > 0; i -= 1) {\n        let j = Math.floor(Math.random() * i);\n        let temporary = array[i];\n        array[i] = array[j];\n        array[j] = temporary;\n    }\n    let team1 = array.filter((_, i) => i % 2 === 0);\n    let team2 = array.filter((_, i) => i % 2 !== 0);\n    return [team1, team2];\n}\n\n// to produce arrays of roughly equal sum\nlet equalTeams = (array) => {\n    //sort players in ascending order by ability\n    array.sort((a,b) => a.ability - b.ability);\n    //set size of teams as half of total number of players in array\n    let setSize = array.length/2;\n   \n    let pos1 = 0;\n    let pos2 = 0;\n    //set i as the highest index in array\n    let i = array.length-1;\n   \n    let sum1 = 0;\n    let sum2 = 0; \n    \n    let team1 = [];\n    let team2 =[];\n    //i is increased each time to move down the array of players to assign, and if sum1 is lower than sum2, team1 is assigned the next player, otherwise team2 is assigned it\n    while (pos1 < setSize && pos2 < setSize) {\n        if (sum1 < sum2) {\n           team1[pos1] = array[i];\n           pos1 += 1;\n           sum1 += array[i].ability; \n        }\n        else {\n            team2[pos2] = array[i];\n            pos2 += 1;\n            sum2 += array[i].ability;\n        }\n        i -= 1;\n    }\n    //if the while has stopped when either team is not the correct size, all values that have not been assigned to the other team are filtered from original array and assigned to the team to bring them up to full quota\n    if(team1.length < setSize) {\n        team1 = array.filter(val => !team2.includes(val));\n    } else if (team2.length < setSize) {\n        team2 = array.filter(val => !team1.includes(val));\n    }\n    \n    return [team1, team2]\n}\n\n/*Action creators*/\n\nexport const saveSettings = ({ team1Name, team2Name, teamSize, abilityPick }) => {\n    return {\n        type: \"SAVE_SETTINGS\",\n        team1Name,\n        team2Name,\n        teamSize: +teamSize, //to ensure teamSize is a number\n        abilityPick,\n    };\n}\n\nexport const updateEntries = ({ playerNames, playerAbilities, totalPlayers }) => {\n    let players = makePlayers(totalPlayers, playerNames, playerAbilities);\n    return {\n        type: \"SAVE_PLAYERS\",\n        randomisedTeams: randomTeams(players),\n        equalisedTeams: equalTeams(players),\n        players: players.sort((a,b) => a.id - b.id), // to ensure players are in the correct order if user returns to form to amend details\n    };\n}\n\nexport const reset = () => {\n    return {\n        type: \"RESET\",\n    };\n};\n\nexport const saveTeamNames = (data) => {\n    return {\n        type: \"SAVE_NAMES\",\n        team1Name: data[0].name,\n        team2Name: data[1].name,\n    };\n};\n\nexport const amendEntries = () => {\n    return {\n        type: \"AMEND_ENTRIES\",\n    }\n}\n\nexport const resetSettings = () => {\n    return {\n        type: \"RESET\",\n    }\n}\n\nexport const saveGames = (data) => {\n    return {\n        type: \"SAVE_GAMES\",\n        games: data,\n    };\n};","// import the library version of axios\nimport axios from \"axios\";\n\n// create a version of axios with useful defaults\nexport default axios.create({\n    baseURL: \"https://stark-ravine-35553.herokuapp.com/api\",\n    headers: {\n        // make sure we get JSON back\n        Accept: \"application/json\",\n    },\n});","import axios from \"../../axios\";\nimport history from \"../../history\";\n\nimport { saveTeamNames, saveGames } from \"./state\";\n\nexport const getTeamNames = () => {\n    return (dispatch) => {\n        return axios.get(\"/team-names/random\").then(({ data }) => {\n            dispatch(saveTeamNames(data.data));\n        })\n    }\n}\n\nexport const getGames = () => {\n    return (dispatch) => {\n        return axios.get(\"/games\").then(({ data }) => {\n            dispatch(saveGames(data.data));\n        })\n    }\n}\n\nexport const postGame = ({ gameDate, team1Name, team2Name, team1Score, team2Score, gameComplete }) => {\n    return (dispatch) => {\n        axios.post(\"/games\", {\n            game_date: gameDate,\n            team_1: team1Name,\n            team_2: team2Name,\n            team_1_score: +team1Score,\n            team_2_score: +team2Score,\n            game_complete: gameComplete,\n        }).then(() => {\n            history.push(\"/game-saved\")\n        })\n    }\n}\n\nexport const putGame = ({ gameDate, team1Name, team2Name, team1Score, team2Score, gameComplete }, id) => {\n    return (dispatch) => {\n        axios.put(`/games/${id}`, {\n            game_date: gameDate,\n            team_1: team1Name,\n            team_2: team2Name,\n            team_1_score: +team1Score,\n            team_2_score: +team2Score,\n            game_complete: gameComplete,\n        }).then(() => {\n            history.push(\"/game-saved\")\n        })\n    }\n}","import { connect } from \"react-redux\";\n\nimport Settings from \"./Settings\";\nimport { saveSettings, resetSettings } from \"../../data/actions/state\";\nimport { getTeamNames } from \"../../data/actions/api\";\nimport history from \"../../history\";\n\nconst mapStateToProps = ({ team1Name, team2Name, teamSize, abilityPick }) => {\n    return {\n        team1Name,\n        team2Name,\n        teamSize,\n        abilityPick\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSave: value => {\n            dispatch(saveSettings(value));\n\n            //go to name entry page\n            history.push(\"/name-entry\");\n        },\n        handleTeamName: () => dispatch(getTeamNames()),\n        handleFormReset: () => dispatch(resetSettings())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React from \"react\";\n\n/// component to return the appropriate message relating to the field if formErrors exist\nconst EntryErrors = ({ formErrors }) => (\n    <div className=\"formErrors\">\n    {Object.keys(formErrors).map((fieldName, i) => {\n      if(formErrors[fieldName].length > 0){\n        return (\n          <p className=\"alert\" key={i}>{formErrors[fieldName]}</p>\n        )        \n      } else {\n        return '';\n      }\n    })}\n  </div>\n    \n);\n\nexport default EntryErrors;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport EntryErrors from \"../EntryErrors/EntryErrors\";\nimport Input from \"../FormControls/Input\";\nimport Button from \"../Buttons/Button\";\n\nclass Entry extends Component {\n    constructor(props) {\n        super(props);\n\n        //creates array of numbers 1-n according to the teamSize, where n is total number of players\n        let array = Array.from(Array(props.teamSize * 2), (_, i) => i + 1);\n        //if players already exist in state, local state is set to current state names and abilities, otherwise default values set\n        let names = array.map(() => \"\");\n        if(props.players.length !== 0) {\n            names = props.players.map((player) => player.name);\n        }\n        let abilities = array.map(() => \"50\");\n        if(props.players.length !== 0) {\n            abilities = props.players.map((player) => player.ability);\n        }\n        \n        this.state = {\n            totalPlayers: array,\n            playerNames: names,\n            playerAbilities: abilities, ///this is the default value for the range, so if the user does not move the range scroller, an ability of 50 will be given\n            formErrors: {\n                incompletePlayerNames: \"\",\n                duplicatePlayerNames: \"\",\n            },\n            playerNamesComplete: false,\n            playerNamesUnique: false,\n            formValid: props.reEntry,\n            reEntry: props.reEntry,\n        };\n\n        this.handleNameInput = this.handleNameInput.bind(this);\n\n        this.handleAbilityInput = this.handleAbilityInput.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    \n\n    validateField(fieldName, value) {\n        let fieldValidationErrors = this.state.formErrors;\n        let playerNamesComplete = this.state.playerNamesComplete;\n        let playerNamesUnique = this.state.playerNamesUnique;\n        let numberOfPlayers = this.state.totalPlayers.length;\n        //find duplicates in array not case sensitive\n        let findDuplicates = arr => {\n            arr = arr.map(name => name.toLowerCase());\n            return arr.filter((name, index) => arr.indexOf(name) !== index);\n        }\n\n        ///switch statement for validation of playerNames, validation for additional fields can be added as necessary\n        // boolean statements to change validation variables in state according to whether complete and unique name data has been added\n        // validation messages set onto fieldValidationErrors according to wheter related to data completeness or uniqueness, this is set in state which is sent as props to the EntryErrors component which displays the message\n        switch(fieldName) {\n            case \"playerNames\":\n                playerNamesComplete = value.indexOf(\"\") === -1;\n\n                playerNamesUnique = playerNamesComplete && findDuplicates(value).length === 0;\n\n                fieldValidationErrors.incompletePlayerNames = playerNamesComplete ? \"\" : `Please enter ${numberOfPlayers} player names`;\n\n                fieldValidationErrors.duplicatePlayerNames = !playerNamesUnique && !playerNamesComplete ? \"\" : !playerNamesUnique && playerNamesComplete ? \"Duplicate names present, please ensure all names are unique\" : \"Click submit to find out your teams!\";\n\n                break;\n            default:\n                break;\n        }\n\n        this.setState({formErrors: fieldValidationErrors,\n                        playerNamesComplete: playerNamesComplete,\n                        playerNamesUnique: playerNamesUnique},\n                        this.validateForm);\n    }\n\n    // sets formValid in state according to whether playerNamesComplete and playerNamesUnique is true, formValid state used to determine whether submit button is enabled, form is valid when user first returns to reenter data, but if a change is made to the form reentry is set to false and form is validated as normal\n    validateForm() {\n        this.setState({formValid: (this.state.playerNamesComplete && this.state.playerNamesUnique) || this.state.reEntry });\n    }\n\n    // below input handlers ensure name and ability are put in the correct index of names and rankings arrays\n    handleNameInput(e, index) {\n        let names = this.state.playerNames.slice();\n        names[index] = e.currentTarget.value;\n        this.setState({ playerNames: names,\n                        reEntry: false },\n                        () => { this.validateField(\"playerNames\", this.state.playerNames)});\n    }\n\n    handleAbilityInput(e, index) {\n        let rankings = this.state.playerAbilities.slice();\n        rankings[index] = e.currentTarget.value;\n        this.setState({ playerAbilities: rankings,\n                        reEntry: false });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleNameEntries({ ...this.state })\n    }\n\n    render() {\n        const { playerNames, playerAbilities, totalPlayers } = this.state;\n\n        const { abilityPick } = this.props;\n\n        return (\n            <div className=\"container\">\n                <h3>Enter player names {abilityPick ? \"and abilities\" : null} here:</h3>\n                <form onSubmit={this.handleSubmit}>\n                    {totalPlayers.map((value, index) => (\n                        <div className=\"player-form\" key={index}>\n                            <Input label={`Player ${value} Name:`} \n                            /*ternary so that groupClass is dependent on if abilityPick = true*/ \n                                    groupClass={(abilityPick ? \"ability-pick \" : \"no-ability-pick\") + \" form-group\"}\n                                    field={`player${value}Name`}\n                                    value={playerNames[index]}\n                                    handleChange={e => this.handleNameInput(e, index)}        \n                            />\n                            {/* Ternary so that the range form elements are only included if abilityPick = true */}\n                            {!abilityPick ? null :\n                                <Input \n                                    label={\"Ability:\"}\n                                    field={`player${value}Ability`}\n                                    type={\"range\"}\n                                    inputClass={\"custom-range\"}\n                                    groupClass={(abilityPick ? \"ability-pick \" : \"no-ability-pick\") + \" form-group\"}\n                                    value={playerAbilities[index]}\n                                    handleChange={e => this.handleAbilityInput(e, index)} />\n                            }\n                        </div>\n                    ))}\n                    <div className=\"panel panel-default\">\n                        <EntryErrors formErrors={this.state.formErrors} />\n                    </div>\n                    <div>\n                        <Button type={\"submit\"}\n                                message={\"Submit\"} \n                                disabled={!this.state.formValid} />\n                    </div>\n                    <div>\n                        <Link to={`/team-details`}>\n                           <p className=\"btn btn-danger gapped-buttons\">Back to settings form</p>\n                        </Link>\n                        <Link to={`/`}>\n                            <p className=\"btn btn-danger\">Home</p>\n                        </Link>\n                    </div>\n                </form>\n                \n            </div>\n        );\n    }\n}\n\n\nexport default Entry;\n","import { connect } from \"react-redux\";\n\nimport Entry from \"./Entry\";\nimport { updateEntries } from \"../../data/actions/state\";\nimport history from \"../../history\";\n\nconst mapStateToProps = ({ teamSize, abilityPick, players, reEntry }) => {\n    return {\n        teamSize,\n        abilityPick,\n        players,\n        reEntry\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleNameEntries: data => {\n            dispatch(updateEntries(data)); \n            \n            //go to selection results page\n            history.push(\"/team-selection\");\n        },\n    }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Entry);","import React from \"react\";\n\nconst Reset = ({ handleReset }) => (\n        <button className=\"btn btn-danger\"\n                onClick={ handleReset }>\n            Start again\n        </button>\n    );\n\nexport default Reset;","import { connect } from \"react-redux\";\n\nimport Reset from \"./Reset\";\nimport { reset } from \"../../data/actions/state\";\n\nimport history from \"../../history\";\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleReset: () => {\n            dispatch(reset()); \n            \n            //go to team details form\n            history.push(\"/team-details\");\n        },\n    }; \n};\n\nexport default connect(null, mapDispatchToProps)(Reset);","import React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nclass Copy extends Component {\n    constructor(props) {\n        super(props);\n\n        let makeText = (team1Name, team2Name, teams) => {\n            if(teams.length > 0 ) {\n                let team1 = teams[0].reduce((string, player) => string + player.name + \"\\n\", \"\\n\");\n                let team2 = teams[1].reduce((string, player) => string + player.name + \"\\n\", \"\\n\");\n                return \"Team: \" + team1Name + team1 + \"\\nTeam: \" + team2Name + team2;\n            }\n            else {\n                return \"\";\n            }\n        }\n\n        this.state = {\n            value: makeText(props.team1Name, props.team2Name, props.teams),\n            copied: false,\n        }\n        \n        this.handleCopy = this.handleCopy.bind(this);\n    }\n\n    handleCopy() {\n        this.setState({ copied: true })\n    }\n    \n    render() {\n        return (\n        <>    \n            <CopyToClipboard \n                text={this.state.value}\n                onCopy={this.handleCopy}>\n                    <button className=\"btn btn-primary\">\n                        Copy team details to clipboard\n                    </button>\n            </CopyToClipboard>\n    \n            {this.state.copied ? \n            <span className=\"copied-msg\">\n                Copied\n            </span> \n            : null}\n        </>\n        );\n  }\n}\n\nexport default Copy;","import { connect } from \"react-redux\";\n\nimport Copy from \"./Copy\";\n\nconst mapStateToProps = ({ team1Name, team2Name, teams }) => {\n    return {\n        team1Name,\n        team2Name,\n        teams,\n    };\n};\n\n\nexport default connect(mapStateToProps)(Copy);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Reset from \"../Reset\";\nimport Button from \"../Buttons/Button\";\nimport Copy from \"../Copy\";\n\nconst Selection = ({ team1Name, team2Name, teams, abilityPick, handleAmend }) => {\n\n    // the two team arrays mapped over to show details for each team. Ability details only shown if abilityPick was set to true in settings form\n    return (\n        <div className=\"container\">\n        <h2>Your team selection is:</h2>\n            {teams.map((team, index) => (\n                <div key={ index } className=\"card\">\n                <ul className=\"list-group\">\n                    <h3 className=\"card-title\">{index === 0 ? team1Name : team2Name}</h3>\n                </ul>\n                {team.map((player, index) => (\n                    <li className=\"list-group-item\" key={ index }>\n                        <p className=\"list-group-item-text\">{player.name}</p>\n                        {abilityPick ?\n                        <p className=\"list-group-item-text\">Ability: {player.ability}/100</p>\n                        : null }\n                    </li>\n                ))}\n                {abilityPick ? <p className=\"average-info\">Average ability: {(team.reduce((total, player) => total + player.ability, 0) / team.length).toFixed(1) }</p> : null }\n                </div>\n            ))}\n        <div className=\"adjacent-buttons\">\n            <Button message={\"Amend player details\"}\n                    onClick={ handleAmend } />\n            <Reset /> \n        </div>\n        <div className=\"adjacent-buttons\">\n            <Copy />\n            <Link to={`/game-details`}>\n                <p className=\"btn btn-primary\">Save game details</p>\n            </Link>\n        </div>\n        </div>\n    );\n};\n\nexport default Selection;\n","import { connect } from \"react-redux\";\n\nimport Selection from \"./Selection\";\nimport { amendEntries } from \"../../data/actions/state\";\nimport history from \"../../history\";\n\nconst mapStateToProps = ({ team1Name, team2Name, teams, abilityPick }) => {\n    return {\n        team1Name,\n        team2Name,\n        teams,\n        abilityPick,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleAmend: () => {\n            dispatch(amendEntries());\n\n            //go to name entry page\n            history.push(\"/name-entry\");\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Input from \"../FormControls/Input\";\nimport Checkbox from \"../FormControls/Checkbox\";\nimport Button from \"../Buttons/Button\";\n\nclass GameForm extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            gameDate: \"\",\n            team1Name: props.team1Name,\n            team2Name: props.team2Name,\n            team1Score: 0,\n            team2Score: 0,\n            gameComplete: false,            \n        };\n\n        this.handleGameDate = this.handleGameDate.bind(this);\n        this.handleTeam1Name = this.handleTeam1Name.bind(this);\n        this.handleTeam2Name = this.handleTeam2Name.bind(this);\n        this.handleTeam1Score = this.handleTeam1Score.bind(this);\n        this.handleTeam2Score = this.handleTeam2Score.bind(this);\n        this.handleGameComplete = this.handleGameComplete.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleGameDate(e) {\n        this.setState({ gameDate: e.currentTarget.value });\n    }\n\n    handleTeam1Name(e) {\n        this.setState({ team1Name: e.currentTarget.value });\n    }\n\n    handleTeam2Name(e) {\n        this.setState({ team2Name: e.currentTarget.value });\n    }\n\n    handleTeam1Score(e) {\n        this.setState({ team1Score: e.currentTarget.value });\n    }\n\n    handleTeam2Score(e) {\n        this.setState({ team2Score: e.currentTarget.value });\n    }\n\n    handleGameComplete(e) {\n        let target = e.target;\n        let value = target.checked;\n        let name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleGameSave({ ...this.state })\n    }\n\n    render() {\n        let {\n            gameDate,\n            team1Name,\n            team2Name,\n            team1Score,\n            team2Score,\n            gameComplete,\n        } = this.state;\n\n        //variable used for determining validation message and button disabled status\n        let formIncomplete = team1Name === \"\" | team2Name === \"\" | gameDate === \"\";\n        \n        return (\n            <div className=\"container\">\n                <h3 className=\"instructons-heading\">Game details</h3>\n                <form onSubmit={this.handleSubmit}>\n                    <Input label={\"Game date\"}\n                           field={\"gameDate\"}\n                           value={gameDate}\n                           type={\"date\"}\n                           handleChange={this.handleGameDate} />\n                    <Input label={\"Team 1 Name\"}\n                           field={\"team1Name\"}\n                           value={team1Name}\n                           handleChange={this.handleTeam1Name} />\n                    <Input label={\"Team 2 Name\"}\n                           field={\"team2Name\"}\n                           value={team2Name}\n                           handleChange={this.handleTeam2Name} />\n                    <Checkbox label={\"Game completed?:\"}\n                          field={\"gameComplete\"}\n                          checked={gameComplete}\n                          handleChange={this.handleGameComplete} />\n                    {/* ternary so inputs for scores only visible if game is complete */}\n                    {gameComplete ? \n                    <>\n                        <Input label={\"Team 1 Score\"}\n                            field={\"team1Score\"}\n                            type={\"number\"}\n                            value={team1Score}\n                            handleChange={this.handleTeam1Score} />\n                        <Input label={\"Team 2 Score\"}\n                            field={\"team2Score\"}\n                            type={\"number\"}\n                            value={team2Score}\n                            handleChange={this.handleTeam2Score} />\n                    </>\n                    : null }\n                    <div className=\"formErrors\">\n                        <p className=\"alert\">\n                            {formIncomplete ? \"Please complete team names and game date\" : \"Game can be submitted!\"}\n                        </p>\n                    </div> \n                    <Button type={\"submit\"}\n                            message={\"Submit\"}\n                            disabled={formIncomplete} />\n                </form>\n                <Link to={`/`}>\n                    <p className=\"btn btn-primary\">Back to Home</p>\n                </Link>\n                \n            </div>\n        );\n    }\n}\n\n\nexport default GameForm;","import { connect } from \"react-redux\";\n\nimport GameForm from \"./GameForm\";\nimport { postGame } from \"../../data/actions/api\";\n\nconst mapStateToProps = ({ team1Name, team2Name }) => {\n    return {\n        team1Name,\n        team2Name,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleGameSave: data => {\n            dispatch(postGame(data));            \n        },\n    }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameForm);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst GameRegistered = () => (\n    <div className=\"container\">\n        <h1>Your game has been saved!</h1>\n        <div className=\"adjacent-buttons\">\n            <Link to={`/`}>\n                    <p className=\"btn btn-primary\">Take me home</p>\n            </Link>\n            <Link to={`/game-history`}>\n                <p className=\"btn btn-danger\">View previous game details</p>\n            </Link>\n        </div>\n    </div>\n)\n\nexport default GameRegistered;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Loading extends Component {\n  render() {\n    const { children, loaded } = this.props;\n    return loaded ? children : (\n      <>\n      <div className=\"progress\">\n        <div\n          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n        />\n      </div>\n      <div className=\"loading-message\">\n        <p>Been here a while? Something might have gone wrong. Click the button to go to home</p>\n        <Link to={`/`}>\n          <p className=\"btn btn-danger\">Home</p>\n        </Link>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default Loading;","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Loading from \"../Loading\";\n\nconst GameHistory = (\n    {\n        games,\n        handleLoad,\n    }\n) => {\n    useEffect(() => {\n        handleLoad()\n    }, [handleLoad])\n\n    return (\n        <div className=\"container history-table\">\n            <h3 className=\"instructions-heading\">Game History</h3>\n            <Loading loaded={games.length}>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Game Date</th>\n                            <th scope=\"col\">Team Names</th>\n                            <th scope=\"col\">Score</th>\n                            <th scope=\"col\">Click link to update</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { games.map((game, index) => (\n                            <tr key={index} >\n                                <td>{game.game_date}</td>\n                                    <td>{`${game.team_1} | ${game.team_2}`}</td>\n                                {!game.game_complete ?\n                                    <td>--</td> : \n                                    <td>{ `${game.team_1_score} - ${game.team_2_score}` }</td> }\n                                <td>\n                                    <Link to={`/game-details/${game.id}`}>\n                                        Update\n                                    </Link>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <Link to={`/`}>\n                    <div className=\"central-button\">\n                        <p className=\"btn btn-danger central-button\">Back to home</p>\n                    </div>\n                </Link>\n            </Loading>\n        </div>\n    )\n}\n\nexport default GameHistory;","import { connect } from \"react-redux\";\n\nimport GameHistory from \"./GameHistory\";\nimport { getGames } from \"../../data/actions/api\";\n\nconst mapStateToProps = ({ games }) => {\n  return {\n    games\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleLoad: () => dispatch(getGames()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameHistory);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Input from \"../FormControls/Input\";\nimport Checkbox from \"../FormControls/Checkbox\";\nimport Button from \"../Buttons/Button\";\nimport Loading from \"../Loading\";\n\nclass UpdateGame extends Component {\n    constructor(props) {\n        super(props);\n\n        let game = {};\n\n        if(this.props.game) {\n            game = this.props.game; \n        }\n                          \n        this.state = {\n            gameDate: game.game_date,\n            team1Name: game.team_1,\n            team2Name: game.team_2,\n            team1Score: game.team_1_score,\n            team2Score: game.team_2_score,\n            gameComplete: game.game_complete,\n            gamesLoaded: this.props.gamesLoaded,        \n        };\n\n        this.handleGameDate = this.handleGameDate.bind(this);\n        this.handleTeam1Name = this.handleTeam1Name.bind(this);\n        this.handleTeam2Name = this.handleTeam2Name.bind(this);\n        this.handleTeam1Score = this.handleTeam1Score.bind(this);\n        this.handleTeam2Score = this.handleTeam2Score.bind(this);\n        this.handleGameComplete = this.handleGameComplete.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        if (!this.props.gamesLoaded) {\n            this.props.handleLoad();\n        }\n    }\n    // component did update needed as API call occurs after first mount if user enters url without previously being on app and thus having a previous api call i.e. if go to url with gamesLoaded = false\n    componentDidUpdate(prevProps) {\n        if (this.props.game !== prevProps.game && this.props.game) {\n            this.setState({\n                gameDate: this.props.game.game_date,\n                team1Name: this.props.game.team_1,\n                team2Name: this.props.game.team_2,\n                team1Score: this.props.game.team_1_score,\n                team2Score: this.props.game.team_2_score,\n                gameComplete: this.props.game.game_complete,\n                gamesLoaded: this.props.gamesLoaded,\n            })\n        }\n    }\n        \n\n    handleGameDate(e) {\n        this.setState({ gameDate: e.currentTarget.value });\n    }\n\n    handleTeam1Name(e) {\n        this.setState({ team1Name: e.currentTarget.value });\n    }\n\n    handleTeam2Name(e) {\n        this.setState({ team2Name: e.currentTarget.value });\n    }\n\n    handleTeam1Score(e) {\n        this.setState({ team1Score: e.currentTarget.value });\n    }\n\n    handleTeam2Score(e) {\n        this.setState({ team2Score: e.currentTarget.value });\n    }\n\n    handleGameComplete(e) {\n        let target = e.target;\n        let value = target.checked;\n        let name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleGameUpdate({ ...this.state }, this.props.gameId )\n    }\n\n    render() {\n\n        let { gameDate,\n              team1Name,\n              team2Name,\n              team1Score,\n              team2Score,\n              gameComplete } = this.state;\n        \n        let formIncomplete = team1Name === \"\" | team2Name === \"\" | gameDate === \"\";\n        \n        return (\n            <div className=\"container\">\n                <h3 className=\"instructions-heading\">Update Game details</h3>\n                <Loading loaded={this.props.game}>\n                <form onSubmit={this.handleSubmit}>\n                    <Input label={\"Game date\"}\n                           field={\"gameDate\"}\n                           value={gameDate}\n                           type={\"date\"}\n                           handleChange={this.handleGameDate} />\n                    <Input label={\"Team 1 Name\"}\n                           field={\"team1Name\"}\n                           value={team1Name}\n                           handleChange={this.handleTeam1Name} />\n                    <Input label={\"Team 2 Name\"}\n                           field={\"team2Name\"}\n                           value={team2Name}\n                           handleChange={this.handleTeam2Name} />\n                    <Checkbox label={\"Game completed?:\"}\n                          field={\"gameComplete\"}\n                          checked={gameComplete}\n                          handleChange={this.handleGameComplete} />\n                    {gameComplete ? \n                    <>\n                        <Input label={\"Team 1 Score\"}\n                            field={\"team1Score\"}\n                            type={\"number\"}\n                            value={team1Score}\n                            handleChange={this.handleTeam1Score} />\n                        <Input label={\"Team 2 Score\"}\n                            field={\"team2Score\"}\n                            type={\"number\"}\n                            value={team2Score}\n                            handleChange={this.handleTeam2Score} />\n                    </>\n                    : null }\n                    <div className=\"formErrors\">\n                        <p className=\"alert\">\n                            {formIncomplete ? \"Please complete team names and game date\" : \"Game can be submitted!\"}\n                        </p>\n                    </div> \n                    <Button type={\"submit\"}\n                            message={\"Submit\"} />\n                </form>\n                <Link to={`/`}>\n                    <p className=\"btn btn-primary\">Back to Home</p>\n                </Link>\n                </Loading>\n            </div>\n        );\n    }\n}\n\n\nexport default UpdateGame;","import { connect } from \"react-redux\";\n\nimport UpdateGame from \"./UpdateGame\";\nimport { getGames, putGame  } from \"../../data/actions/api\";\n\nconst mapStateToProps = ({ games, gamesLoaded }, { gameId }) => {\n    return {\n        game: games.find(({ id }) => id === +gameId), //game with the id in own props through match in app.js found from all games held in state following api call\n        gamesLoaded,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleLoad: () => dispatch(getGames()),\n        handleGameUpdate: (data, id) => {\n            dispatch(putGame(data, id));\n        }\n    }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGame);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst FourOhFour = () => (\n    <div className=\"container\">\n        <h1>Whoops!</h1>\n        <h2 className=\"titleFont contrastHeading\">Something went wrong..</h2>\n        <Link to={`/`}>\n            <div className=\"central-button\">\n                <p className=\"btn btn-primary\">Take me home</p>\n            </div>\n        </Link>\n    </div>\n)\n\nexport default FourOhFour;","import React from 'react';\nimport './App.css';\n\n//ReactRouter component imports\nimport {\n  Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n// History file imported to use ReactRouter's history functionality\nimport history from \"./history\";\n\n//Component imports\nimport Header from \"./components/Header\";\nimport About from \"./components/About\";\nimport Settings from \"./components/Settings\";\nimport Entry from \"./components/Entry\";\nimport Selection from \"./components/Selection\";\nimport GameForm from \"./components/GameForm\";\nimport GameRegistered from \"./components/GameRegistered\";\nimport GameHistory from \"./components/GameHistory\";\nimport UpdateGame from \"./components/UpdateGame\";\nimport FourOhFour from \"./components/FourOhFour\";\n\nconst App = () => {\nreturn (\n  <Router history={ history }>\n    <div className={\"background_image\"}>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <About />\n        </Route>\n        <Route exact path=\"/team-details\">\n          <Settings />\n        </Route>\n        <Route exact path=\"/name-entry\">\n          <Entry />\n        </Route>\n        <Route exact path=\"/team-selection\">\n          <Selection />\n        </Route>\n        <Route exact path=\"/game-details\">\n          <GameForm />\n        </Route>\n        <Route exact path=\"/game-saved\">\n          <GameRegistered />\n        </Route>\n        <Route exact path=\"/game-history\">\n          <GameHistory />\n        </Route>\n        <Route path=\"/game-details/:id\" render={({ match }) => (\n          <UpdateGame gameId={match.params.id} />\n        )} />\n          <FourOhFour />\n      </Switch>\n      \n    </div>\n  </Router>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initial = {\n    team1Name: \"Team 1\",\n    team2Name: \"Team 2\",\n    teamSize: 5,\n    abilityPick: false, \n    players: [],\n    teams: [],\n    reEntry: false,\n    games: [],\n    gamesLoaded: false,\n};\n\nexport default initial;","import initial from \"./initial\";\n\nconst saveSettingsReducer = (state, \n    {team1Name,\n    team2Name,\n    teamSize,\n    abilityPick }) => {\n        return {\n            ...initial,\n            team1Name,\n            team2Name,\n            teamSize,\n            abilityPick,\n        }\n    }\n\nconst savePlayersReducer = (state, { randomisedTeams, equalisedTeams, players }) => {\n        \n    let notFifty = randomisedTeams.filter(player => player.ability !== 50); // to make randomised teams be used if the user did not change any of the abilities away from the default of 50\n\n    return {\n        ...state,\n        players: players,\n        teams: (!state.abilityPick || notFifty.length === 0) ? randomisedTeams : equalisedTeams,\n    }\n}\n\nconst resetReducer = (state) => {\n    return {\n        ...initial,\n    }\n}\n\nconst saveNamesReducer = (state, {team1Name, team2Name }) => {\n    return {\n        ...state,\n        team1Name,\n        team2Name,\n    }\n}\n\nconst setAmendReducer = (state) => {\n    return {\n        ...state,\n        reEntry: true,\n    }\n}\n\nconst saveGamesReducer = (state, { games }) => {\n    return {\n        ...state,\n        games,\n        gamesLoaded: true,\n    }\n}\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"SAVE_SETTINGS\": return saveSettingsReducer(state, action);\n        case \"SAVE_PLAYERS\": return savePlayersReducer(state, action);\n        case \"SAVE_NAMES\": return saveNamesReducer(state, action);\n        case \"AMEND_ENTRIES\": return setAmendReducer(state);\n        case \"SAVE_GAMES\": return saveGamesReducer(state, action);\n        case \"RESET\": return resetReducer(state);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport persistState from \"redux-localstorage\";\n\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\n// set up redux dev tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// set up store\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk), persistState()) //persistState and thunk required due to using some api and some local data\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from \"../src/data/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>, document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}